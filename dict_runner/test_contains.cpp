// CPSC221 2011W2 Brendan Shillingford

// Tests the contains method on partially random data,
// and in the process other methods as well.
// Run the script with the same filename to run this on all
// dictionaries; it fetches them from dict_runner.cpp, but 
// can be modified to execute on a list of them.

// HOW TO RUN (IMPORTANT): assumes that compiler passes in
// (using -DDICT=DSomeDict(true) for example) a dictionary
// initialization expression.

// Note: The contains method was to implement expected 
// semantics for inserts and deletions on the dictionaries.

#include "Dictionary.h"

#define DEBUG
#ifdef NDEBUG
#error DEBUG must be enabled. However, NDEBUG is defined
#endif

#include <iostream>
#include <cstdio>
#include <ctime>
#include <cstdlib>
#include <cstdint>
#include <cinttypes>
#include <cassert>
using namespace std;

// autogenerated list of headers: (see the generator)
#include "test_contains.h"


typedef Dictionary<uint64_t, uint64_t> Dict;
#define FOR(i,n) for(uint64_t (i)=0; (i)<(n); (i)++)

// DEBUG: just leave sorted list as default
#ifndef DICT
#define DICT SortedListDict<uint64_t,uint64_t>
#endif

int main(int argc, char** argv)
{
	// perform a sequence of tests on the dictionary
	srand(time(NULL));

	Dict* d = new DICT; // using the define

	/////////////////////// THE TESTS /////////////////////

	const int N = 10; // so we insert 1..N inclusive
	// enough to resize a few times

	FOR(i, N)
		d->insert(i+1, i+1);
	
	// contains first and last but not the one after
	assert(d->contains(1) && d->contains(N));
	assert(!(d->contains(N+1)));
	
	// remove middle and verify it's gone
	d->remove(N/2);
	assert(!(d->contains(N/2)));
	
	// remove first and verify it's gone
	d->remove(1);
	assert(!(d->contains(1)));

	// insert first and verify it's back
	d->insert(1, 1);
	assert(d->contains(1));

	// remove last and verify it's gone; reinsert and check it's back after
	d->remove(N);
	assert(!(d->contains(N)));
	d->insert(N, N);
	assert(d->contains(N));

	///////////////////////////////////////////////////////

	delete d;
	return 0;
}

